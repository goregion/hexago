# GitHub Actions workflow for comprehensive test suite
name: Test Suite (Unit & Integration)

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  unit-tests:
    runs-on: ubuntu-latest
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Run unit tests
      run: go test -v -race ./tests/unit/... -timeout 30s
    
    - name: Run unit tests with coverage
      run: go test -v -race -coverprofile=unit-coverage.out ./tests/unit/... -timeout 30s
    
    - name: Upload unit test coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./unit-coverage.out
        flags: unit
        name: codecov-unit

  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests  # Run integration tests only after unit tests pass
    
    strategy:
      matrix:
        go-version: ['1.21', '1.22', '1.23']
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: ${{ matrix.go-version }}
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Generate gRPC code
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        protoc --go_out=. --go-grpc_out=. api/backoffice/grpc/ohlc.proto
    
    - name: Run integration tests
      run: go test -v -race ./tests/integration/... -timeout 60s
    
    - name: Run integration tests with coverage
      run: go test -v -race -coverprofile=integration-coverage.out ./tests/integration/... -timeout 60s
    
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./integration-coverage.out
        flags: integration
        name: codecov-integration
    
  benchmark-tests:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Install dependencies
      run: go mod download
    
    - name: Generate gRPC code
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        protoc --go_out=. --go-grpc_out=. api/backoffice/grpc/ohlc.proto
    
    - name: Run benchmarks
      run: go test -bench=. -benchmem ./tests/integration/... -timeout 300s

  combined-coverage:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests]
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Go
      uses: actions/setup-go@v4
      with:
        go-version: '1.23'
    
    - name: Cache Go modules
      uses: actions/cache@v3
      with:
        path: ~/go/pkg/mod
        key: ${{ runner.os }}-go-${{ hashFiles('**/go.sum') }}
        restore-keys: |
          ${{ runner.os }}-go-
    
    - name: Install dependencies
      run: go mod download
    
    - name: Generate gRPC code
      run: |
        go install google.golang.org/protobuf/cmd/protoc-gen-go@latest
        go install google.golang.org/grpc/cmd/protoc-gen-go-grpc@latest
        sudo apt-get update
        sudo apt-get install -y protobuf-compiler
        protoc --go_out=. --go-grpc_out=. api/backoffice/grpc/ohlc.proto
    
    - name: Run all tests with combined coverage
      run: go test -v -race -coverprofile=combined-coverage.out ./tests/... -timeout 120s
    
    - name: Upload combined coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./combined-coverage.out
        flags: combined
        name: codecov-combined
