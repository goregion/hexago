// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.35.1
// 	protoc        v5.29.5
// source: trade.proto

package entity

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type OperationType int32

const (
	OperationType_ADD    OperationType = 0
	OperationType_UPDATE OperationType = 1
	OperationType_REMOVE OperationType = 2
)

// Enum value maps for OperationType.
var (
	OperationType_name = map[int32]string{
		0: "ADD",
		1: "UPDATE",
		2: "REMOVE",
	}
	OperationType_value = map[string]int32{
		"ADD":    0,
		"UPDATE": 1,
		"REMOVE": 2,
	}
)

func (x OperationType) Enum() *OperationType {
	p := new(OperationType)
	*p = x
	return p
}

func (x OperationType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OperationType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[0].Descriptor()
}

func (OperationType) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[0]
}

func (x OperationType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OperationType.Descriptor instead.
func (OperationType) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{0}
}

type TradeRecord_CmdType int32

const (
	TradeRecord_BUY        TradeRecord_CmdType = 0
	TradeRecord_SELL       TradeRecord_CmdType = 1
	TradeRecord_BUY_LIMIT  TradeRecord_CmdType = 2
	TradeRecord_SELL_LIMIT TradeRecord_CmdType = 3
	TradeRecord_BUY_STOP   TradeRecord_CmdType = 4
	TradeRecord_SELL_STOP  TradeRecord_CmdType = 5
)

// Enum value maps for TradeRecord_CmdType.
var (
	TradeRecord_CmdType_name = map[int32]string{
		0: "BUY",
		1: "SELL",
		2: "BUY_LIMIT",
		3: "SELL_LIMIT",
		4: "BUY_STOP",
		5: "SELL_STOP",
	}
	TradeRecord_CmdType_value = map[string]int32{
		"BUY":        0,
		"SELL":       1,
		"BUY_LIMIT":  2,
		"SELL_LIMIT": 3,
		"BUY_STOP":   4,
		"SELL_STOP":  5,
	}
)

func (x TradeRecord_CmdType) Enum() *TradeRecord_CmdType {
	p := new(TradeRecord_CmdType)
	*p = x
	return p
}

func (x TradeRecord_CmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (TradeRecord_CmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[1].Descriptor()
}

func (TradeRecord_CmdType) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[1]
}

func (x TradeRecord_CmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use TradeRecord_CmdType.Descriptor instead.
func (TradeRecord_CmdType) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{0, 0}
}

type BalanceRecord_CmdType int32

const (
	BalanceRecord_BALANCE BalanceRecord_CmdType = 0
	BalanceRecord_CREDIT  BalanceRecord_CmdType = 1
)

// Enum value maps for BalanceRecord_CmdType.
var (
	BalanceRecord_CmdType_name = map[int32]string{
		0: "BALANCE",
		1: "CREDIT",
	}
	BalanceRecord_CmdType_value = map[string]int32{
		"BALANCE": 0,
		"CREDIT":  1,
	}
)

func (x BalanceRecord_CmdType) Enum() *BalanceRecord_CmdType {
	p := new(BalanceRecord_CmdType)
	*p = x
	return p
}

func (x BalanceRecord_CmdType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BalanceRecord_CmdType) Descriptor() protoreflect.EnumDescriptor {
	return file_trade_proto_enumTypes[2].Descriptor()
}

func (BalanceRecord_CmdType) Type() protoreflect.EnumType {
	return &file_trade_proto_enumTypes[2]
}

func (x BalanceRecord_CmdType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BalanceRecord_CmdType.Descriptor instead.
func (BalanceRecord_CmdType) EnumDescriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{1, 0}
}

type TradeRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation       OperationType       `protobuf:"varint,1,opt,name=operation,proto3,enum=entity.OperationType" json:"operation,omitempty"`
	OrderId         int32               `protobuf:"varint,2,opt,name=order_id,json=orderId,proto3" json:"order_id,omitempty"`
	Cmd             TradeRecord_CmdType `protobuf:"varint,3,opt,name=cmd,proto3,enum=entity.TradeRecord_CmdType" json:"cmd,omitempty"`
	Login           int32               `protobuf:"varint,4,opt,name=login,proto3" json:"login,omitempty"`
	Symbol          string              `protobuf:"bytes,5,opt,name=symbol,proto3" json:"symbol,omitempty"`
	SymbolDigits    int32               `protobuf:"varint,6,opt,name=symbol_digits,json=symbolDigits,proto3" json:"symbol_digits,omitempty"`
	SymbolCsize     float64             `protobuf:"fixed64,7,opt,name=symbol_csize,json=symbolCsize,proto3" json:"symbol_csize,omitempty"`
	Volume          float64             `protobuf:"fixed64,8,opt,name=volume,proto3" json:"volume,omitempty"`
	RealizedPnl     float64             `protobuf:"fixed64,9,opt,name=realized_pnl,json=realizedPnl,proto3" json:"realized_pnl,omitempty"`
	OpenTime        int32               `protobuf:"varint,10,opt,name=open_time,json=openTime,proto3" json:"open_time,omitempty"`
	OpenPrice       float64             `protobuf:"fixed64,11,opt,name=open_price,json=openPrice,proto3" json:"open_price,omitempty"`
	OpenCovRate     float64             `protobuf:"fixed64,12,opt,name=open_cov_rate,json=openCovRate,proto3" json:"open_cov_rate,omitempty"`
	CloseTime       int32               `protobuf:"varint,13,opt,name=close_time,json=closeTime,proto3" json:"close_time,omitempty"`
	ClosePrice      float64             `protobuf:"fixed64,14,opt,name=close_price,json=closePrice,proto3" json:"close_price,omitempty"`
	CloseCovRate    float64             `protobuf:"fixed64,15,opt,name=close_cov_rate,json=closeCovRate,proto3" json:"close_cov_rate,omitempty"`
	ServerName      string              `protobuf:"bytes,16,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
	SymbolCurrency1 string              `protobuf:"bytes,20,opt,name=symbol_currency1,json=symbolCurrency1,proto3" json:"symbol_currency1,omitempty"`
	SymbolCurrency2 string              `protobuf:"bytes,21,opt,name=symbol_currency2,json=symbolCurrency2,proto3" json:"symbol_currency2,omitempty"`
}

func (x *TradeRecord) Reset() {
	*x = TradeRecord{}
	mi := &file_trade_proto_msgTypes[0]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *TradeRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*TradeRecord) ProtoMessage() {}

func (x *TradeRecord) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[0]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use TradeRecord.ProtoReflect.Descriptor instead.
func (*TradeRecord) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{0}
}

func (x *TradeRecord) GetOperation() OperationType {
	if x != nil {
		return x.Operation
	}
	return OperationType_ADD
}

func (x *TradeRecord) GetOrderId() int32 {
	if x != nil {
		return x.OrderId
	}
	return 0
}

func (x *TradeRecord) GetCmd() TradeRecord_CmdType {
	if x != nil {
		return x.Cmd
	}
	return TradeRecord_BUY
}

func (x *TradeRecord) GetLogin() int32 {
	if x != nil {
		return x.Login
	}
	return 0
}

func (x *TradeRecord) GetSymbol() string {
	if x != nil {
		return x.Symbol
	}
	return ""
}

func (x *TradeRecord) GetSymbolDigits() int32 {
	if x != nil {
		return x.SymbolDigits
	}
	return 0
}

func (x *TradeRecord) GetSymbolCsize() float64 {
	if x != nil {
		return x.SymbolCsize
	}
	return 0
}

func (x *TradeRecord) GetVolume() float64 {
	if x != nil {
		return x.Volume
	}
	return 0
}

func (x *TradeRecord) GetRealizedPnl() float64 {
	if x != nil {
		return x.RealizedPnl
	}
	return 0
}

func (x *TradeRecord) GetOpenTime() int32 {
	if x != nil {
		return x.OpenTime
	}
	return 0
}

func (x *TradeRecord) GetOpenPrice() float64 {
	if x != nil {
		return x.OpenPrice
	}
	return 0
}

func (x *TradeRecord) GetOpenCovRate() float64 {
	if x != nil {
		return x.OpenCovRate
	}
	return 0
}

func (x *TradeRecord) GetCloseTime() int32 {
	if x != nil {
		return x.CloseTime
	}
	return 0
}

func (x *TradeRecord) GetClosePrice() float64 {
	if x != nil {
		return x.ClosePrice
	}
	return 0
}

func (x *TradeRecord) GetCloseCovRate() float64 {
	if x != nil {
		return x.CloseCovRate
	}
	return 0
}

func (x *TradeRecord) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

func (x *TradeRecord) GetSymbolCurrency1() string {
	if x != nil {
		return x.SymbolCurrency1
	}
	return ""
}

func (x *TradeRecord) GetSymbolCurrency2() string {
	if x != nil {
		return x.SymbolCurrency2
	}
	return ""
}

type BalanceRecord struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Operation  OperationType         `protobuf:"varint,1,opt,name=operation,proto3,enum=entity.OperationType" json:"operation,omitempty"`
	Cmd        BalanceRecord_CmdType `protobuf:"varint,2,opt,name=cmd,proto3,enum=entity.BalanceRecord_CmdType" json:"cmd,omitempty"`
	Login      int32                 `protobuf:"varint,3,opt,name=login,proto3" json:"login,omitempty"`
	Timestamp  int32                 `protobuf:"varint,4,opt,name=timestamp,proto3" json:"timestamp,omitempty"`
	Amount     float64               `protobuf:"fixed64,5,opt,name=amount,proto3" json:"amount,omitempty"`
	ServerName string                `protobuf:"bytes,16,opt,name=server_name,json=serverName,proto3" json:"server_name,omitempty"`
}

func (x *BalanceRecord) Reset() {
	*x = BalanceRecord{}
	mi := &file_trade_proto_msgTypes[1]
	ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
	ms.StoreMessageInfo(mi)
}

func (x *BalanceRecord) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BalanceRecord) ProtoMessage() {}

func (x *BalanceRecord) ProtoReflect() protoreflect.Message {
	mi := &file_trade_proto_msgTypes[1]
	if x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BalanceRecord.ProtoReflect.Descriptor instead.
func (*BalanceRecord) Descriptor() ([]byte, []int) {
	return file_trade_proto_rawDescGZIP(), []int{1}
}

func (x *BalanceRecord) GetOperation() OperationType {
	if x != nil {
		return x.Operation
	}
	return OperationType_ADD
}

func (x *BalanceRecord) GetCmd() BalanceRecord_CmdType {
	if x != nil {
		return x.Cmd
	}
	return BalanceRecord_BALANCE
}

func (x *BalanceRecord) GetLogin() int32 {
	if x != nil {
		return x.Login
	}
	return 0
}

func (x *BalanceRecord) GetTimestamp() int32 {
	if x != nil {
		return x.Timestamp
	}
	return 0
}

func (x *BalanceRecord) GetAmount() float64 {
	if x != nil {
		return x.Amount
	}
	return 0
}

func (x *BalanceRecord) GetServerName() string {
	if x != nil {
		return x.ServerName
	}
	return ""
}

var File_trade_proto protoreflect.FileDescriptor

var file_trade_proto_rawDesc = []byte{
	0x0a, 0x0b, 0x74, 0x72, 0x61, 0x64, 0x65, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x06, 0x65,
	0x6e, 0x74, 0x69, 0x74, 0x79, 0x22, 0xd4, 0x05, 0x0a, 0x0b, 0x54, 0x72, 0x61, 0x64, 0x65, 0x52,
	0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x33, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74,
	0x79, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x19, 0x0a, 0x08, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x5f, 0x69, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x07, 0x6f, 0x72,
	0x64, 0x65, 0x72, 0x49, 0x64, 0x12, 0x2d, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x1b, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x54, 0x72, 0x61, 0x64,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x79,
	0x6d, 0x62, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x73, 0x79, 0x6d, 0x62,
	0x6f, 0x6c, 0x12, 0x23, 0x0a, 0x0d, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x64, 0x69, 0x67,
	0x69, 0x74, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x44, 0x69, 0x67, 0x69, 0x74, 0x73, 0x12, 0x21, 0x0a, 0x0c, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x63, 0x73, 0x69, 0x7a, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x73,
	0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x73, 0x69, 0x7a, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x75, 0x6d, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x75,
	0x6d, 0x65, 0x12, 0x21, 0x0a, 0x0c, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a, 0x65, 0x64, 0x5f, 0x70,
	0x6e, 0x6c, 0x18, 0x09, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x72, 0x65, 0x61, 0x6c, 0x69, 0x7a,
	0x65, 0x64, 0x50, 0x6e, 0x6c, 0x12, 0x1b, 0x0a, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x74, 0x69,
	0x6d, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x6f, 0x70, 0x65, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x70, 0x72, 0x69, 0x63, 0x65,
	0x18, 0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x6e, 0x50, 0x72, 0x69, 0x63,
	0x65, 0x12, 0x22, 0x0a, 0x0d, 0x6f, 0x70, 0x65, 0x6e, 0x5f, 0x63, 0x6f, 0x76, 0x5f, 0x72, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x6f, 0x70, 0x65, 0x6e, 0x43, 0x6f,
	0x76, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1d, 0x0a, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x74,
	0x69, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x70, 0x72,
	0x69, 0x63, 0x65, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x63, 0x6c, 0x6f, 0x73, 0x65,
	0x50, 0x72, 0x69, 0x63, 0x65, 0x12, 0x24, 0x0a, 0x0e, 0x63, 0x6c, 0x6f, 0x73, 0x65, 0x5f, 0x63,
	0x6f, 0x76, 0x5f, 0x72, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c, 0x63,
	0x6c, 0x6f, 0x73, 0x65, 0x43, 0x6f, 0x76, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1f, 0x0a, 0x0b, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18, 0x10, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x29, 0x0a, 0x10,
	0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x31, 0x12, 0x29, 0x0a, 0x10, 0x73, 0x79, 0x6d, 0x62, 0x6f,
	0x6c, 0x5f, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63, 0x79, 0x32, 0x18, 0x15, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0f, 0x73, 0x79, 0x6d, 0x62, 0x6f, 0x6c, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x63,
	0x79, 0x32, 0x22, 0x58, 0x0a, 0x07, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x55, 0x59, 0x10, 0x00, 0x12, 0x08, 0x0a, 0x04, 0x53, 0x45, 0x4c, 0x4c, 0x10, 0x01,
	0x12, 0x0d, 0x0a, 0x09, 0x42, 0x55, 0x59, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x02, 0x12,
	0x0e, 0x0a, 0x0a, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x4c, 0x49, 0x4d, 0x49, 0x54, 0x10, 0x03, 0x12,
	0x0c, 0x0a, 0x08, 0x42, 0x55, 0x59, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x04, 0x12, 0x0d, 0x0a,
	0x09, 0x53, 0x45, 0x4c, 0x4c, 0x5f, 0x53, 0x54, 0x4f, 0x50, 0x10, 0x05, 0x22, 0x86, 0x02, 0x0a,
	0x0d, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x12, 0x33,
	0x0a, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x15, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x4f, 0x70, 0x65, 0x72, 0x61,
	0x74, 0x69, 0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x52, 0x09, 0x6f, 0x70, 0x65, 0x72, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x12, 0x2f, 0x0a, 0x03, 0x63, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x1d, 0x2e, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x2e, 0x42, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x65, 0x63, 0x6f, 0x72, 0x64, 0x2e, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x52,
	0x03, 0x63, 0x6d, 0x64, 0x12, 0x14, 0x0a, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x05, 0x6c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x1c, 0x0a, 0x09, 0x74, 0x69,
	0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x18, 0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x74,
	0x69, 0x6d, 0x65, 0x73, 0x74, 0x61, 0x6d, 0x70, 0x12, 0x16, 0x0a, 0x06, 0x61, 0x6d, 0x6f, 0x75,
	0x6e, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x61, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x1f, 0x0a, 0x0b, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x5f, 0x6e, 0x61, 0x6d, 0x65, 0x18,
	0x10, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x73, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4e, 0x61, 0x6d,
	0x65, 0x22, 0x22, 0x0a, 0x07, 0x43, 0x6d, 0x64, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0b, 0x0a, 0x07,
	0x42, 0x41, 0x4c, 0x41, 0x4e, 0x43, 0x45, 0x10, 0x00, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x52, 0x45,
	0x44, 0x49, 0x54, 0x10, 0x01, 0x2a, 0x30, 0x0a, 0x0d, 0x4f, 0x70, 0x65, 0x72, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x07, 0x0a, 0x03, 0x41, 0x44, 0x44, 0x10, 0x00, 0x12,
	0x0a, 0x0a, 0x06, 0x55, 0x50, 0x44, 0x41, 0x54, 0x45, 0x10, 0x01, 0x12, 0x0a, 0x0a, 0x06, 0x52,
	0x45, 0x4d, 0x4f, 0x56, 0x45, 0x10, 0x02, 0x42, 0x11, 0x5a, 0x0f, 0x69, 0x6e, 0x74, 0x65, 0x72,
	0x6e, 0x61, 0x6c, 0x2f, 0x65, 0x6e, 0x74, 0x69, 0x74, 0x79, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x33,
}

var (
	file_trade_proto_rawDescOnce sync.Once
	file_trade_proto_rawDescData = file_trade_proto_rawDesc
)

func file_trade_proto_rawDescGZIP() []byte {
	file_trade_proto_rawDescOnce.Do(func() {
		file_trade_proto_rawDescData = protoimpl.X.CompressGZIP(file_trade_proto_rawDescData)
	})
	return file_trade_proto_rawDescData
}

var file_trade_proto_enumTypes = make([]protoimpl.EnumInfo, 3)
var file_trade_proto_msgTypes = make([]protoimpl.MessageInfo, 2)
var file_trade_proto_goTypes = []any{
	(OperationType)(0),         // 0: entity.OperationType
	(TradeRecord_CmdType)(0),   // 1: entity.TradeRecord.CmdType
	(BalanceRecord_CmdType)(0), // 2: entity.BalanceRecord.CmdType
	(*TradeRecord)(nil),        // 3: entity.TradeRecord
	(*BalanceRecord)(nil),      // 4: entity.BalanceRecord
}
var file_trade_proto_depIdxs = []int32{
	0, // 0: entity.TradeRecord.operation:type_name -> entity.OperationType
	1, // 1: entity.TradeRecord.cmd:type_name -> entity.TradeRecord.CmdType
	0, // 2: entity.BalanceRecord.operation:type_name -> entity.OperationType
	2, // 3: entity.BalanceRecord.cmd:type_name -> entity.BalanceRecord.CmdType
	4, // [4:4] is the sub-list for method output_type
	4, // [4:4] is the sub-list for method input_type
	4, // [4:4] is the sub-list for extension type_name
	4, // [4:4] is the sub-list for extension extendee
	0, // [0:4] is the sub-list for field type_name
}

func init() { file_trade_proto_init() }
func file_trade_proto_init() {
	if File_trade_proto != nil {
		return
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_trade_proto_rawDesc,
			NumEnums:      3,
			NumMessages:   2,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_trade_proto_goTypes,
		DependencyIndexes: file_trade_proto_depIdxs,
		EnumInfos:         file_trade_proto_enumTypes,
		MessageInfos:      file_trade_proto_msgTypes,
	}.Build()
	File_trade_proto = out.File
	file_trade_proto_rawDesc = nil
	file_trade_proto_goTypes = nil
	file_trade_proto_depIdxs = nil
}
